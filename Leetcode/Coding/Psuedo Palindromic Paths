class Solution:
    def preorder(self,root,count_arr):
        if(root == None):
            return 0
        count_arr[root.val] += 1
        if(root.left == None and root.right == None): #Leaf Node
            odd = False
            for i in range(len(count_arr)):
                if(count_arr[i]%2 != 0):
                    if(odd == False):
                        odd = True
                        continue
                    if odd == True:
                        #Faield
                        count_arr[root.val] -= 1
                        return 0
            #Success
            count_arr[root.val] -= 1                
            return 1
        val1 =  self.preorder(root.left,count_arr)
        val2 = self.preorder(root.right,count_arr)
        count_arr[root.val] -= 1                
        return val1 + val2
                    
                    
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:
        count_arr = [0]*10
        return self.preorder(root,count_arr)
